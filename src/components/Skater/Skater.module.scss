.skater-A {
  .skaterBackground {
    stroke: #000;
    stroke-width: 0.05;
  }
}

.skater-B {
  .skaterBackground {
    stroke: #000;
    stroke-width: 0.05;
  }
}

.blockerNumber {
  font-family: "Work Sans", sans-serif;
}

.statusWrapper {
  pointer-events: none;
}

.status {
  display: none;
  filter: drop-shadow(0, 0, 0.2, #fff);
}

.skater {
  pointer-events: all;
  .rotationHandle {
    display: none;
    cursor: pointer;
  }

  &--has-focus {
    --skater-rim-color: rgb(163, 5, 100);
    .rotationHandle {
      display: initial;
    }
    .skaterBackground {
      stroke: var(--skater-rim-color, #000);
    }
  }

  $root: &;

  &--in-bounds:not(#{$root}--in-play) {
    .statusOutOfPlay {
      display: initial;
      fill: #f00;
    }
  }

  &:not(#{$root}--in-bounds) {
    .statusOutOfBounds {
      display: initial;
      fill: #f00;
    }
  }
}

.shield {
  fill: none;
  stroke: #000;
  stroke-width: 0.04;

  pointer-events: none;
}

//
//  There is a transition between the skater position changes
//  Transitioning with gsap didn't work because the skaters would update
//  and then gsap would reset the position, then tweening to the final position of the new track/situation.
//  Sometimes a frame of the final position could be seen before the tween.
//  To prevent the flicker the skater body would have to be updated by gsap entirely, no thank you. Or something similarly complicated.
//
:global(.js-skater) {
  transition: 0.3s transform ease-in-out;
}

:global(.js-track-dragging) :global(.js-skater) {
  transition: none;
}

:global(.js-skater-rotation-wrapper) {
  transition: 0.3s transform ease-in-out;
}

:global(.js-track-dragging) :global(.js-skater-rotation-wrapper) {
  transition: none;
}
